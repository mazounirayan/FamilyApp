package com.example.familyapp.viewmodel


import android.util.Log
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.familyapp.data.model.task.Task
import com.example.familyapp.data.model.task.TaskUpdate
import com.example.familyapp.network.dto.taskDto.TaskDto
import com.example.familyapp.repositories.TaskRepository

class TaskViewModel(
    private val taskRepo: TaskRepository,
    val context:LifecycleOwner
): ViewModel() {



    private val _task = MutableLiveData<List<Task>>()

    val task: LiveData<List<Task>> get() = _task

    fun fetchTask(idUser: Int) {
        _task.value
        this.taskRepo.tasks.observe(this.context) { data ->
            this@TaskViewModel._task.value = data
        }

        this.taskRepo.getTaskFromUser(idUser)
    }

    fun addTask(task:TaskDto){
        this.taskRepo.addTask(task)
    }

    fun patchTask(id:Int,task: TaskUpdate){
        this.taskRepo.patchTask(id,task)
    }

    /*fun refreshTasks() {
        // Force une mise Ã  jour des donnÃ©es observÃ©es
        _task.postValue(_task.value)
   */
    fun fetchAllTasks(idFamille: Int) {
        Log.d("TaskViewModel", "ðŸ”¹ DÃ©but du fetchAllTasks pour idFamille : $idFamille") // ðŸ”¥ VÃ©rifie si c'est bien appelÃ©

        _task.value = emptyList() // RÃ©initialise la liste des tÃ¢ches avant de charger
        this.taskRepo.tasks.observe(this.context) { data ->
            Log.d("TaskViewModel", "ðŸ”¹ TÃ¢ches reÃ§ues du repo : ${data.size}") // ðŸ”¥ VÃ©rifie si le repo retourne des donnÃ©es
            _task.value = data
        }

        this.taskRepo.getAllTasks(idFamille)
        Log.d("TaskViewModel", "ðŸ”¹ AprÃ¨s appel de getAllTasks dans le repository") // ðŸ”¥ VÃ©rifie si Ã§a plante aprÃ¨s
    }

}
